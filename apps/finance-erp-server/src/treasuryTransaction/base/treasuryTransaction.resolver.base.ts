/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TreasuryTransaction } from "./TreasuryTransaction";
import { TreasuryTransactionCountArgs } from "./TreasuryTransactionCountArgs";
import { TreasuryTransactionFindManyArgs } from "./TreasuryTransactionFindManyArgs";
import { TreasuryTransactionFindUniqueArgs } from "./TreasuryTransactionFindUniqueArgs";
import { CreateTreasuryTransactionArgs } from "./CreateTreasuryTransactionArgs";
import { UpdateTreasuryTransactionArgs } from "./UpdateTreasuryTransactionArgs";
import { DeleteTreasuryTransactionArgs } from "./DeleteTreasuryTransactionArgs";
import { TreasuryTransactionService } from "../treasuryTransaction.service";
@graphql.Resolver(() => TreasuryTransaction)
export class TreasuryTransactionResolverBase {
  constructor(protected readonly service: TreasuryTransactionService) {}

  async _treasuryTransactionsMeta(
    @graphql.Args() args: TreasuryTransactionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TreasuryTransaction])
  async treasuryTransactions(
    @graphql.Args() args: TreasuryTransactionFindManyArgs
  ): Promise<TreasuryTransaction[]> {
    return this.service.treasuryTransactions(args);
  }

  @graphql.Query(() => TreasuryTransaction, { nullable: true })
  async treasuryTransaction(
    @graphql.Args() args: TreasuryTransactionFindUniqueArgs
  ): Promise<TreasuryTransaction | null> {
    const result = await this.service.treasuryTransaction(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TreasuryTransaction)
  async createTreasuryTransaction(
    @graphql.Args() args: CreateTreasuryTransactionArgs
  ): Promise<TreasuryTransaction> {
    return await this.service.createTreasuryTransaction({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => TreasuryTransaction)
  async updateTreasuryTransaction(
    @graphql.Args() args: UpdateTreasuryTransactionArgs
  ): Promise<TreasuryTransaction | null> {
    try {
      return await this.service.updateTreasuryTransaction({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TreasuryTransaction)
  async deleteTreasuryTransaction(
    @graphql.Args() args: DeleteTreasuryTransactionArgs
  ): Promise<TreasuryTransaction | null> {
    try {
      return await this.service.deleteTreasuryTransaction(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
