/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TreasuryTransactionService } from "../treasuryTransaction.service";
import { TreasuryTransactionCreateInput } from "./TreasuryTransactionCreateInput";
import { TreasuryTransaction } from "./TreasuryTransaction";
import { TreasuryTransactionFindManyArgs } from "./TreasuryTransactionFindManyArgs";
import { TreasuryTransactionWhereUniqueInput } from "./TreasuryTransactionWhereUniqueInput";
import { TreasuryTransactionUpdateInput } from "./TreasuryTransactionUpdateInput";

export class TreasuryTransactionControllerBase {
  constructor(protected readonly service: TreasuryTransactionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TreasuryTransaction })
  async createTreasuryTransaction(
    @common.Body() data: TreasuryTransactionCreateInput
  ): Promise<TreasuryTransaction> {
    return await this.service.createTreasuryTransaction({
      data: data,
      select: {
        amount: true,
        createdAt: true,
        description: true,
        id: true,
        transactionDate: true,
        transactionType: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TreasuryTransaction] })
  @ApiNestedQuery(TreasuryTransactionFindManyArgs)
  async treasuryTransactions(
    @common.Req() request: Request
  ): Promise<TreasuryTransaction[]> {
    const args = plainToClass(TreasuryTransactionFindManyArgs, request.query);
    return this.service.treasuryTransactions({
      ...args,
      select: {
        amount: true,
        createdAt: true,
        description: true,
        id: true,
        transactionDate: true,
        transactionType: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TreasuryTransaction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async treasuryTransaction(
    @common.Param() params: TreasuryTransactionWhereUniqueInput
  ): Promise<TreasuryTransaction | null> {
    const result = await this.service.treasuryTransaction({
      where: params,
      select: {
        amount: true,
        createdAt: true,
        description: true,
        id: true,
        transactionDate: true,
        transactionType: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TreasuryTransaction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTreasuryTransaction(
    @common.Param() params: TreasuryTransactionWhereUniqueInput,
    @common.Body() data: TreasuryTransactionUpdateInput
  ): Promise<TreasuryTransaction | null> {
    try {
      return await this.service.updateTreasuryTransaction({
        where: params,
        data: data,
        select: {
          amount: true,
          createdAt: true,
          description: true,
          id: true,
          transactionDate: true,
          transactionType: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TreasuryTransaction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTreasuryTransaction(
    @common.Param() params: TreasuryTransactionWhereUniqueInput
  ): Promise<TreasuryTransaction | null> {
    try {
      return await this.service.deleteTreasuryTransaction({
        where: params,
        select: {
          amount: true,
          createdAt: true,
          description: true,
          id: true,
          transactionDate: true,
          transactionType: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
