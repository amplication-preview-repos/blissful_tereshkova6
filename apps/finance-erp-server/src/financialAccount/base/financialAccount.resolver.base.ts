/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { FinancialAccount } from "./FinancialAccount";
import { FinancialAccountCountArgs } from "./FinancialAccountCountArgs";
import { FinancialAccountFindManyArgs } from "./FinancialAccountFindManyArgs";
import { FinancialAccountFindUniqueArgs } from "./FinancialAccountFindUniqueArgs";
import { CreateFinancialAccountArgs } from "./CreateFinancialAccountArgs";
import { UpdateFinancialAccountArgs } from "./UpdateFinancialAccountArgs";
import { DeleteFinancialAccountArgs } from "./DeleteFinancialAccountArgs";
import { FinancialAccountService } from "../financialAccount.service";
@graphql.Resolver(() => FinancialAccount)
export class FinancialAccountResolverBase {
  constructor(protected readonly service: FinancialAccountService) {}

  async _financialAccountsMeta(
    @graphql.Args() args: FinancialAccountCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FinancialAccount])
  async financialAccounts(
    @graphql.Args() args: FinancialAccountFindManyArgs
  ): Promise<FinancialAccount[]> {
    return this.service.financialAccounts(args);
  }

  @graphql.Query(() => FinancialAccount, { nullable: true })
  async financialAccount(
    @graphql.Args() args: FinancialAccountFindUniqueArgs
  ): Promise<FinancialAccount | null> {
    const result = await this.service.financialAccount(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FinancialAccount)
  async createFinancialAccount(
    @graphql.Args() args: CreateFinancialAccountArgs
  ): Promise<FinancialAccount> {
    return await this.service.createFinancialAccount({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => FinancialAccount)
  async updateFinancialAccount(
    @graphql.Args() args: UpdateFinancialAccountArgs
  ): Promise<FinancialAccount | null> {
    try {
      return await this.service.updateFinancialAccount({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FinancialAccount)
  async deleteFinancialAccount(
    @graphql.Args() args: DeleteFinancialAccountArgs
  ): Promise<FinancialAccount | null> {
    try {
      return await this.service.deleteFinancialAccount(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
