/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FinancialAccountService } from "../financialAccount.service";
import { FinancialAccountCreateInput } from "./FinancialAccountCreateInput";
import { FinancialAccount } from "./FinancialAccount";
import { FinancialAccountFindManyArgs } from "./FinancialAccountFindManyArgs";
import { FinancialAccountWhereUniqueInput } from "./FinancialAccountWhereUniqueInput";
import { FinancialAccountUpdateInput } from "./FinancialAccountUpdateInput";

export class FinancialAccountControllerBase {
  constructor(protected readonly service: FinancialAccountService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FinancialAccount })
  async createFinancialAccount(
    @common.Body() data: FinancialAccountCreateInput
  ): Promise<FinancialAccount> {
    return await this.service.createFinancialAccount({
      data: data,
      select: {
        accountName: true,
        accountNumber: true,
        balance: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FinancialAccount] })
  @ApiNestedQuery(FinancialAccountFindManyArgs)
  async financialAccounts(
    @common.Req() request: Request
  ): Promise<FinancialAccount[]> {
    const args = plainToClass(FinancialAccountFindManyArgs, request.query);
    return this.service.financialAccounts({
      ...args,
      select: {
        accountName: true,
        accountNumber: true,
        balance: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FinancialAccount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async financialAccount(
    @common.Param() params: FinancialAccountWhereUniqueInput
  ): Promise<FinancialAccount | null> {
    const result = await this.service.financialAccount({
      where: params,
      select: {
        accountName: true,
        accountNumber: true,
        balance: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FinancialAccount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFinancialAccount(
    @common.Param() params: FinancialAccountWhereUniqueInput,
    @common.Body() data: FinancialAccountUpdateInput
  ): Promise<FinancialAccount | null> {
    try {
      return await this.service.updateFinancialAccount({
        where: params,
        data: data,
        select: {
          accountName: true,
          accountNumber: true,
          balance: true,
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FinancialAccount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFinancialAccount(
    @common.Param() params: FinancialAccountWhereUniqueInput
  ): Promise<FinancialAccount | null> {
    try {
      return await this.service.deleteFinancialAccount({
        where: params,
        select: {
          accountName: true,
          accountNumber: true,
          balance: true,
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
