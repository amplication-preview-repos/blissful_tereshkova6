/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProcurementOrderService } from "../procurementOrder.service";
import { ProcurementOrderCreateInput } from "./ProcurementOrderCreateInput";
import { ProcurementOrder } from "./ProcurementOrder";
import { ProcurementOrderFindManyArgs } from "./ProcurementOrderFindManyArgs";
import { ProcurementOrderWhereUniqueInput } from "./ProcurementOrderWhereUniqueInput";
import { ProcurementOrderUpdateInput } from "./ProcurementOrderUpdateInput";

export class ProcurementOrderControllerBase {
  constructor(protected readonly service: ProcurementOrderService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProcurementOrder })
  async createProcurementOrder(
    @common.Body() data: ProcurementOrderCreateInput
  ): Promise<ProcurementOrder> {
    return await this.service.createProcurementOrder({
      data: data,
      select: {
        createdAt: true,
        id: true,
        orderDate: true,
        orderNumber: true,
        supplierName: true,
        totalAmount: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ProcurementOrder] })
  @ApiNestedQuery(ProcurementOrderFindManyArgs)
  async procurementOrders(
    @common.Req() request: Request
  ): Promise<ProcurementOrder[]> {
    const args = plainToClass(ProcurementOrderFindManyArgs, request.query);
    return this.service.procurementOrders({
      ...args,
      select: {
        createdAt: true,
        id: true,
        orderDate: true,
        orderNumber: true,
        supplierName: true,
        totalAmount: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProcurementOrder })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async procurementOrder(
    @common.Param() params: ProcurementOrderWhereUniqueInput
  ): Promise<ProcurementOrder | null> {
    const result = await this.service.procurementOrder({
      where: params,
      select: {
        createdAt: true,
        id: true,
        orderDate: true,
        orderNumber: true,
        supplierName: true,
        totalAmount: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProcurementOrder })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProcurementOrder(
    @common.Param() params: ProcurementOrderWhereUniqueInput,
    @common.Body() data: ProcurementOrderUpdateInput
  ): Promise<ProcurementOrder | null> {
    try {
      return await this.service.updateProcurementOrder({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          orderDate: true,
          orderNumber: true,
          supplierName: true,
          totalAmount: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProcurementOrder })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProcurementOrder(
    @common.Param() params: ProcurementOrderWhereUniqueInput
  ): Promise<ProcurementOrder | null> {
    try {
      return await this.service.deleteProcurementOrder({
        where: params,
        select: {
          createdAt: true,
          id: true,
          orderDate: true,
          orderNumber: true,
          supplierName: true,
          totalAmount: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
