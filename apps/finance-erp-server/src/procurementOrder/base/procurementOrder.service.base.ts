/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ProcurementOrder as PrismaProcurementOrder,
} from "@prisma/client";

export class ProcurementOrderServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ProcurementOrderCountArgs, "select">
  ): Promise<number> {
    return this.prisma.procurementOrder.count(args);
  }

  async procurementOrders(
    args: Prisma.ProcurementOrderFindManyArgs
  ): Promise<PrismaProcurementOrder[]> {
    return this.prisma.procurementOrder.findMany(args);
  }
  async procurementOrder(
    args: Prisma.ProcurementOrderFindUniqueArgs
  ): Promise<PrismaProcurementOrder | null> {
    return this.prisma.procurementOrder.findUnique(args);
  }
  async createProcurementOrder(
    args: Prisma.ProcurementOrderCreateArgs
  ): Promise<PrismaProcurementOrder> {
    return this.prisma.procurementOrder.create(args);
  }
  async updateProcurementOrder(
    args: Prisma.ProcurementOrderUpdateArgs
  ): Promise<PrismaProcurementOrder> {
    return this.prisma.procurementOrder.update(args);
  }
  async deleteProcurementOrder(
    args: Prisma.ProcurementOrderDeleteArgs
  ): Promise<PrismaProcurementOrder> {
    return this.prisma.procurementOrder.delete(args);
  }
}
