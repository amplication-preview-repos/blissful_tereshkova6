/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ProcurementOrder } from "./ProcurementOrder";
import { ProcurementOrderCountArgs } from "./ProcurementOrderCountArgs";
import { ProcurementOrderFindManyArgs } from "./ProcurementOrderFindManyArgs";
import { ProcurementOrderFindUniqueArgs } from "./ProcurementOrderFindUniqueArgs";
import { CreateProcurementOrderArgs } from "./CreateProcurementOrderArgs";
import { UpdateProcurementOrderArgs } from "./UpdateProcurementOrderArgs";
import { DeleteProcurementOrderArgs } from "./DeleteProcurementOrderArgs";
import { ProcurementOrderService } from "../procurementOrder.service";
@graphql.Resolver(() => ProcurementOrder)
export class ProcurementOrderResolverBase {
  constructor(protected readonly service: ProcurementOrderService) {}

  async _procurementOrdersMeta(
    @graphql.Args() args: ProcurementOrderCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ProcurementOrder])
  async procurementOrders(
    @graphql.Args() args: ProcurementOrderFindManyArgs
  ): Promise<ProcurementOrder[]> {
    return this.service.procurementOrders(args);
  }

  @graphql.Query(() => ProcurementOrder, { nullable: true })
  async procurementOrder(
    @graphql.Args() args: ProcurementOrderFindUniqueArgs
  ): Promise<ProcurementOrder | null> {
    const result = await this.service.procurementOrder(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ProcurementOrder)
  async createProcurementOrder(
    @graphql.Args() args: CreateProcurementOrderArgs
  ): Promise<ProcurementOrder> {
    return await this.service.createProcurementOrder({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ProcurementOrder)
  async updateProcurementOrder(
    @graphql.Args() args: UpdateProcurementOrderArgs
  ): Promise<ProcurementOrder | null> {
    try {
      return await this.service.updateProcurementOrder({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProcurementOrder)
  async deleteProcurementOrder(
    @graphql.Args() args: DeleteProcurementOrderArgs
  ): Promise<ProcurementOrder | null> {
    try {
      return await this.service.deleteProcurementOrder(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
