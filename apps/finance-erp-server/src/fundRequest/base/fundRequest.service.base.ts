/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, FundRequest as PrismaFundRequest } from "@prisma/client";

export class FundRequestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FundRequestCountArgs, "select">
  ): Promise<number> {
    return this.prisma.fundRequest.count(args);
  }

  async fundRequests(
    args: Prisma.FundRequestFindManyArgs
  ): Promise<PrismaFundRequest[]> {
    return this.prisma.fundRequest.findMany(args);
  }
  async fundRequest(
    args: Prisma.FundRequestFindUniqueArgs
  ): Promise<PrismaFundRequest | null> {
    return this.prisma.fundRequest.findUnique(args);
  }
  async createFundRequest(
    args: Prisma.FundRequestCreateArgs
  ): Promise<PrismaFundRequest> {
    return this.prisma.fundRequest.create(args);
  }
  async updateFundRequest(
    args: Prisma.FundRequestUpdateArgs
  ): Promise<PrismaFundRequest> {
    return this.prisma.fundRequest.update(args);
  }
  async deleteFundRequest(
    args: Prisma.FundRequestDeleteArgs
  ): Promise<PrismaFundRequest> {
    return this.prisma.fundRequest.delete(args);
  }
}
