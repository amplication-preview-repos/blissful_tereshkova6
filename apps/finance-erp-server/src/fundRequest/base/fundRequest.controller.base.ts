/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FundRequestService } from "../fundRequest.service";
import { FundRequestCreateInput } from "./FundRequestCreateInput";
import { FundRequest } from "./FundRequest";
import { FundRequestFindManyArgs } from "./FundRequestFindManyArgs";
import { FundRequestWhereUniqueInput } from "./FundRequestWhereUniqueInput";
import { FundRequestUpdateInput } from "./FundRequestUpdateInput";

export class FundRequestControllerBase {
  constructor(protected readonly service: FundRequestService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FundRequest })
  async createFundRequest(
    @common.Body() data: FundRequestCreateInput
  ): Promise<FundRequest> {
    return await this.service.createFundRequest({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FundRequest] })
  @ApiNestedQuery(FundRequestFindManyArgs)
  async fundRequests(@common.Req() request: Request): Promise<FundRequest[]> {
    const args = plainToClass(FundRequestFindManyArgs, request.query);
    return this.service.fundRequests({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FundRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async fundRequest(
    @common.Param() params: FundRequestWhereUniqueInput
  ): Promise<FundRequest | null> {
    const result = await this.service.fundRequest({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FundRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFundRequest(
    @common.Param() params: FundRequestWhereUniqueInput,
    @common.Body() data: FundRequestUpdateInput
  ): Promise<FundRequest | null> {
    try {
      return await this.service.updateFundRequest({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FundRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFundRequest(
    @common.Param() params: FundRequestWhereUniqueInput
  ): Promise<FundRequest | null> {
    try {
      return await this.service.deleteFundRequest({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
