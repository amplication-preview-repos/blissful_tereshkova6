/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { FundRequest } from "./FundRequest";
import { FundRequestCountArgs } from "./FundRequestCountArgs";
import { FundRequestFindManyArgs } from "./FundRequestFindManyArgs";
import { FundRequestFindUniqueArgs } from "./FundRequestFindUniqueArgs";
import { DeleteFundRequestArgs } from "./DeleteFundRequestArgs";
import { FundRequestService } from "../fundRequest.service";
@graphql.Resolver(() => FundRequest)
export class FundRequestResolverBase {
  constructor(protected readonly service: FundRequestService) {}

  async _fundRequestsMeta(
    @graphql.Args() args: FundRequestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FundRequest])
  async fundRequests(
    @graphql.Args() args: FundRequestFindManyArgs
  ): Promise<FundRequest[]> {
    return this.service.fundRequests(args);
  }

  @graphql.Query(() => FundRequest, { nullable: true })
  async fundRequest(
    @graphql.Args() args: FundRequestFindUniqueArgs
  ): Promise<FundRequest | null> {
    const result = await this.service.fundRequest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FundRequest)
  async deleteFundRequest(
    @graphql.Args() args: DeleteFundRequestArgs
  ): Promise<FundRequest | null> {
    try {
      return await this.service.deleteFundRequest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
